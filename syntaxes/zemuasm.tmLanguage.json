{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ZEMUASM",
	"patterns": [
		{"include": "#comments"},
		{"include": "#strings"},
		{"include": "#atregisters"},
		{"include": "#dataat"},
		{"include": "#numbers"},
		{"include": "#registers"},
		{"include": "#opcodes"},
		{"include": "#labels"},
		{"include": "#datas"},
		{"include": "#datasize"}
	],
	"repository": {
		"comments":{
			"patterns": [
				{
					"name": "comment.line.single.zemuasm",
					"match": ";[^\n]*"
				}
			]
		},
		"opcodes": {
			"patterns": [
				{
					"name": "keyword.operator.zeuasm",
					"comment": "Opcodes for arithmetic operation on 8-bit data",
					"match": "(?i)\\b(ADD|SUB|MUL|DIV|MOD|INC|DEC)\\b"
				},
				{
					"name": "keyword.operator.new.zeuasm",
					"comment": "Opcodes for arithmetic operation on 16-bit data",
					"match": "(?i)\\b(WADD|WSUB|WMUL|WDIV|WMOD|WINC|WDEC)\\b"
				},
				{
					"name": "keyword.operator.zeuasm",
					"comment": "Opcodes for bitwize operation on 8-bit data",
					"match": "(?i)\\b(BAND|BOR|BXOR|BNOT|SHL|SHR|SHLU|SHRU|ROTL|ROTR|ROTLU|ROTRU)\\b"
				},
				{
					"name": "keyword.operator.zeuasm",
					"comment": "Opcodes for bitwize operation on 16-bit data",
					"match": "(?i)\\b(WBAND|WBOR|WBXOR|WBNOT|WSHL|WSHR|WSHLU|WSHRU|WROTL|WROTR|WROTLU|WROTRU)\\b"
				},
				{
					"name": "keyword.other.zemuasm",
					"comment": "Basic opcodes to manage 8-bit data",
					"match": "(?i)\\b(MV|LOAD|MOVE|PEEK|PEEKR|POKE|POKER|PUSH|POP)\\b"
				},
				{
					"name": "keyword.other.zemuasm",
					"comment": "Basic opcodes to manage 16-bit data",
					"match": "(?i)\\b(WMV|WLOAD|WMOVE|WPEEK|WPEEKR|WPOKE|WPOKER|WPUSH|WPOP)\\b"
				},
				{
					"name": "keyword.control.zemuasm",
					"comment": "Control opcodes",
					"match": "(?i)\\b(JUMP|JUMPI|JUMPZ|JUMPN|JUMPNI|JUMPC|JUMPCI|CALL|CALLR|RETURN)\\b"
				},
				{
					"name": "keyword.other.debug.zemuasm",
					"comment": "Special opcodes",
					"match": "(?i)\\b(HALT|STOP|NOP|PRINT|WPRINT|WRITE)\\b"
				},
				{
					"name": "invalid.illegal",
					"comment": "",
					"match": "(?i)\\b(DATA)\\b"
				}
			]
		},
		"registers": {
			"patterns": [
				{
					"comment": "8 bit registers",
					"name": "variable.language.zemuasm",
					"match": "(?i)\\br(?:[0-9]|1[0-5])\\b"
				},
				{
					"comment": "16 bit registers",
					"name": "variable.language.zemuasm",
					"match": "(?i)\\bw(?:[0-9]|1[0-5])\\b"
				},
				{
					"comment": "Special 16 bit registers",
					"name": "variable.language.zemuasm",
					"match": "(?i)\\b(SP|PC)\\b"
				}
			]
		},
		"atregisters": {
			"patterns": [
				{
					"comment": "16 bit registers",
					"name": "storage.type",
					"match": "(?i)@\\b(?:[wr](?:[0-9]|1[0-5])|sp|pc)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.zemuasm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.zemuasm",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"name": "constant",
			"patterns": [
				{
					"name": "constant.numeric.zemuasm",
					"match": "\\b[0-9]+(\\.[0-9]+)?\\b|\\b0[xX][0-9a-fA-F]+\\b"
				}
			]
		},
		"labels": {
			"name": "label",
			"comment": "Label memory address",
			"patterns": [
				{
					"name": "entity.name.section.zemuasm",
					"match": "\\b[^:0-9\\W][^:\\W]*\\:"
				}
			]
		},
		"datas": {
			"name": "support.constant.zemuasm",
			"patterns": [
				{
					"name": "support.constant.zemuasm",
					"match": "\\bdb\\b"
				}
			]
		},
		"datasize": {
			"patterns": [
				{
					"name": "constant.language",
					"comment": "Size of data stored with db keyword",
					"match": "(#[^:0-9\\W][^:\\W]*)\\b"
				}
			]
		},
		
		"dataat": {
			"name": "support.constant.zemuasm",
			"patterns": [
				{
					"name": "constant.character",
					"comment": "Data at memory address",
					"match": "@((\\w|#)+)"
				}
			]
		}
	},
	"scopeName": "source.zemuasm"
}